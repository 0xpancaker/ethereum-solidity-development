/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface QuardraticVotingInterface extends ethers.utils.Interface {
  functions: {
    "MAX_CREDITS_PER_DAY()": FunctionFragment;
    "createPost(address,string)": FunctionFragment;
    "createVote(address,uint256,uint256)": FunctionFragment;
    "creditsForRate(uint256)": FunctionFragment;
    "editVote(uint256,uint256)": FunctionFragment;
    "posts(uint256)": FunctionFragment;
    "removeVote(uint256)": FunctionFragment;
    "userCredits(address)": FunctionFragment;
    "votes(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_CREDITS_PER_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPost",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createVote",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditsForRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "posts", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "removeVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userCredits", values: [string]): string;
  encodeFunctionData(functionFragment: "votes", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "MAX_CREDITS_PER_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creditsForRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "posts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;

  events: {
    "CreatePost(address,uint256,uint256)": EventFragment;
    "CreateVote(address,uint256,uint256,uint256)": EventFragment;
    "EditVote(uint256,uint256,uint256)": EventFragment;
    "RemoveVote(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatePost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EditVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveVote"): EventFragment;
}

export type CreatePostEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    _author: string;
    _postId: BigNumber;
    _timestamp: BigNumber;
  }
>;

export type CreateVoteEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    _voter: string;
    _voteId: BigNumber;
    _rating: BigNumber;
    _timestamp: BigNumber;
  }
>;

export type EditVoteEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    _voteId: BigNumber;
    _rating: BigNumber;
    _timestamp: BigNumber;
  }
>;

export type RemoveVoteEvent = TypedEvent<
  [BigNumber, BigNumber] & { _voteId: BigNumber; _timestamp: BigNumber }
>;

export class QuardraticVoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QuardraticVotingInterface;

  functions: {
    MAX_CREDITS_PER_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPost(
      _author: string,
      _caption: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createVote(
      _voter: string,
      _postId: BigNumberish,
      _rating: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creditsForRate(
      _rating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    editVote(
      _voteId: BigNumberish,
      _rating: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    posts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string] & {
        id: BigNumber;
        caption: string;
        timestamp: BigNumber;
        author: string;
      }
    >;

    removeVote(
      _voteId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userCredits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        lastReset: BigNumber;
        creditsUsed: BigNumber;
      }
    >;

    votes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        id: BigNumber;
        postId: BigNumber;
        timestamp: BigNumber;
        rating: BigNumber;
        voter: string;
      }
    >;
  };

  MAX_CREDITS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  createPost(
    _author: string,
    _caption: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createVote(
    _voter: string,
    _postId: BigNumberish,
    _rating: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creditsForRate(
    _rating: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  editVote(
    _voteId: BigNumberish,
    _rating: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  posts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string] & {
      id: BigNumber;
      caption: string;
      timestamp: BigNumber;
      author: string;
    }
  >;

  removeVote(
    _voteId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userCredits(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      owner: string;
      lastReset: BigNumber;
      creditsUsed: BigNumber;
    }
  >;

  votes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      id: BigNumber;
      postId: BigNumber;
      timestamp: BigNumber;
      rating: BigNumber;
      voter: string;
    }
  >;

  callStatic: {
    MAX_CREDITS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    createPost(
      _author: string,
      _caption: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createVote(
      _voter: string,
      _postId: BigNumberish,
      _rating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creditsForRate(
      _rating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    editVote(
      _voteId: BigNumberish,
      _rating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    posts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string] & {
        id: BigNumber;
        caption: string;
        timestamp: BigNumber;
        author: string;
      }
    >;

    removeVote(_voteId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userCredits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        lastReset: BigNumber;
        creditsUsed: BigNumber;
      }
    >;

    votes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        id: BigNumber;
        postId: BigNumber;
        timestamp: BigNumber;
        rating: BigNumber;
        voter: string;
      }
    >;
  };

  filters: {
    "CreatePost(address,uint256,uint256)"(
      _author?: null,
      _postId?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _author: string; _postId: BigNumber; _timestamp: BigNumber }
    >;

    CreatePost(
      _author?: null,
      _postId?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _author: string; _postId: BigNumber; _timestamp: BigNumber }
    >;

    "CreateVote(address,uint256,uint256,uint256)"(
      _voter?: null,
      _voteId?: null,
      _rating?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _voter: string;
        _voteId: BigNumber;
        _rating: BigNumber;
        _timestamp: BigNumber;
      }
    >;

    CreateVote(
      _voter?: null,
      _voteId?: null,
      _rating?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        _voter: string;
        _voteId: BigNumber;
        _rating: BigNumber;
        _timestamp: BigNumber;
      }
    >;

    "EditVote(uint256,uint256,uint256)"(
      _voteId?: null,
      _rating?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { _voteId: BigNumber; _rating: BigNumber; _timestamp: BigNumber }
    >;

    EditVote(
      _voteId?: null,
      _rating?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { _voteId: BigNumber; _rating: BigNumber; _timestamp: BigNumber }
    >;

    "RemoveVote(uint256,uint256)"(
      _voteId?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _voteId: BigNumber; _timestamp: BigNumber }
    >;

    RemoveVote(
      _voteId?: null,
      _timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _voteId: BigNumber; _timestamp: BigNumber }
    >;
  };

  estimateGas: {
    MAX_CREDITS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    createPost(
      _author: string,
      _caption: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createVote(
      _voter: string,
      _postId: BigNumberish,
      _rating: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creditsForRate(
      _rating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    editVote(
      _voteId: BigNumberish,
      _rating: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    posts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    removeVote(
      _voteId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userCredits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_CREDITS_PER_DAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPost(
      _author: string,
      _caption: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createVote(
      _voter: string,
      _postId: BigNumberish,
      _rating: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creditsForRate(
      _rating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    editVote(
      _voteId: BigNumberish,
      _rating: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    posts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeVote(
      _voteId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userCredits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
