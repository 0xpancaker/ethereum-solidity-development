{
  "language": "Solidity",
  "sources": {
    "contracts/QuardraticVoting.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n////////////////////////////////////////////////////////////////////////////////////////////\n///\n/// @title QuardraticVoting\n/// @author conlot-crypto\n///\n////////////////////////////////////////////////////////////////////////////////////////////\ncontract QuardraticVoting {\n  struct Post {\n    uint256 id;\n    string caption; // maximum 280 characters\n    uint256 timestamp;\n    address author;\n  }\n  Post[] public posts;\n  mapping(uint256 => uint256) postIDToIndex;\n\n  struct Vote {\n    uint256 id;\n    uint256 postId;\n    uint256 timestamp;\n    uint256 rating;\n    address voter;\n  }\n  Vote[] public votes;\n  mapping(uint256 => uint256) voteIDToIndex;\n\n  struct Credit {\n    address owner;\n    uint256 lastReset;\n    uint256 creditsUsed;\n  }\n  mapping(address => Credit) public userCredits;\n\n  /// @dev credits given to user every day\n  uint256 public constant MAX_CREDITS_PER_DAY = 40;\n\n  /// @dev period to rechard credits\n  uint64 internal constant CREDITS_RECHARD_PERID = 24 hours;\n\n  ////////////////////////////////////////////////////////////////////\n  /// Events of QuardraticVoting\n  ////////////////////////////////////////////////////////////////////\n  event CreatePost(address _author, uint256 _postId, uint256 _timestamp);\n  event CreateVote(\n    address _voter,\n    uint256 _voteId,\n    uint256 _rating,\n    uint256 _timestamp\n  );\n  event EditVote(uint256 _voteId, uint256 _rating, uint256 _timestamp);\n  event RemoveVote(uint256 _voteId, uint256 _timestamp);\n\n  ////////////////////////////////////////////////////////////////////\n  /// Logics of Vote and Posts\n  ////////////////////////////////////////////////////////////////////\n\n  function creditsForRate(uint256 _rating) public pure returns (uint256) {\n    require(_rating > 0 && _rating < 6, 'Invalid Rating');\n\n    if (_rating == 1 || _rating == 4) {\n      return 4;\n    } else if (_rating == 2 || _rating == 3) {\n      return 1;\n    }\n\n    return 9;\n  }\n\n  function _voteWithRatings(address _user, uint256 _rating) internal {\n    Credit storage userCredit = userCredits[_user];\n    uint256 creditsToRate = creditsForRate(_rating);\n\n    if (userCredit.owner == address(0)) {\n      // first vote\n      userCredit.lastReset = block.timestamp;\n      userCredit.owner = _user;\n      userCredit.creditsUsed = creditsToRate;\n    } else {\n      // check if 1 day is passed from lastRest\n      if (block.timestamp >= userCredit.lastReset + CREDITS_RECHARD_PERID) {\n        userCredit.creditsUsed = 0;\n        userCredit.lastReset = block.timestamp;\n      }\n\n      // check if have enought credits to rate\n      require(\n        userCredit.creditsUsed + creditsToRate <= MAX_CREDITS_PER_DAY,\n        'Not enough credits today'\n      );\n\n      // update credit info\n      userCredit.creditsUsed += creditsToRate;\n      userCredit.owner = _user;\n    }\n  }\n\n  /// @dev createPost\n  /// @param _author who creates a Post\n  /// @param _caption string content of Post\n  /// @return newPostId index of new Post added to array\n  function createPost(address _author, string memory _caption)\n    public\n    returns (uint256 newPostId)\n  {\n    require(_author != address(0), 'Invalid Author');\n    require(_author == msg.sender, 'Caller is not an Author');\n\n    bytes memory string_caption = bytes(_caption);\n    require(\n      string_caption.length > 0 && string_caption.length <= 280,\n      'Invalid Caption'\n    );\n\n    // calculate new Post Id\n    if (posts.length > 0) {\n      newPostId = posts[posts.length - 1].id;\n    }\n\n    // add new Post to array\n    Post memory newPost = Post(newPostId, _caption, block.timestamp, _author);\n    posts.push(newPost);\n\n    // store new Post Index with postId\n    postIDToIndex[newPostId] = posts.length;\n\n    // trigger event of creating a new post\n    emit CreatePost(_author, newPostId, block.timestamp);\n  }\n\n  /// @dev createVote\n  /// @param _voter who creates a Vote\n  /// @param _postId id of Post\n  /// @param _rating new rating\n  /// @return newVoteId Id of new voting added to array\n  function createVote(\n    address _voter,\n    uint256 _postId,\n    uint256 _rating\n  ) public returns (uint256 newVoteId) {\n    require(_voter != address(0), 'Invalid Voter');\n    require(_voter == msg.sender, 'Voter is not caller');\n    require(_rating > 0 && _rating < 6, 'Invalid Rating');\n    require(posts.length > 0, 'No Post yet');\n\n    // validation of postID\n    require(postIDToIndex[_postId] > 0, 'Invalid PostId');\n\n    _voteWithRatings(_voter, _rating);\n\n    // calculate new Vote Id\n    if (votes.length > 0) {\n      newVoteId = votes[votes.length - 1].id;\n    }\n\n    // add new vote to array\n    Vote memory newVote = Vote(\n      newVoteId,\n      _postId,\n      block.timestamp,\n      _rating,\n      _voter\n    );\n    votes.push(newVote);\n\n    // store new Vote Index with voteId\n    voteIDToIndex[newVoteId] = votes.length;\n\n    // trigger event of creating a new Vote\n    emit CreateVote(_voter, newVoteId, _rating, block.timestamp);\n  }\n\n  /// @dev editVote\n  /// @param _voteId id of Vote to edit\n  /// @param _rating new rating\n  function editVote(uint256 _voteId, uint256 _rating) public {\n    // validation check of _rating\n    require(_rating > 0 && _rating < 6, 'Invalid Rating');\n\n    // validaton check if not vote yet\n    require(votes.length > 0, 'No Vote yet');\n\n    // validation check if voteId is right\n    require(voteIDToIndex[_voteId] > 0, 'Invalid VoteId');\n\n    Vote storage vote = votes[voteIDToIndex[_voteId] - 1];\n\n    // validation check if vote exists\n    require(vote.voter != address(0), 'Invalid VoteId');\n\n    // validation check of new voting\n    require(vote.voter == msg.sender, 'Caller is not Voter');\n    require(vote.rating != _rating, 'Same Rate');\n\n    // update rating\n    vote.rating = _rating;\n\n    // trigger event of editing vote\n    emit EditVote(_voteId, _rating, block.timestamp);\n  }\n\n  /// @dev removeVote\n  /// @param _voteId id of Vote to remove\n  function removeVote(uint256 _voteId) public {\n    // validaton check if not vote yet\n    require(votes.length > 0, 'No Vote yet');\n\n    // validation check if voteId is right\n    require(voteIDToIndex[_voteId] > 0, 'Invalid VoteId');\n\n    // calculating voteIndex\n    uint256 voteIndex = voteIDToIndex[_voteId] - 1;\n\n    // validation check if vote exists\n    require(votes[voteIndex].voter != address(0), 'Invalid VoteId');\n\n    // validation check if voter is trying to remove\n    require(votes[voteIndex].voter == msg.sender, 'Caller is not Voter');\n\n    // remove vote\n    delete votes[voteIndex];\n    voteIDToIndex[_voteId] = 0;\n\n    // trigger event of deleting vote\n    emit RemoveVote(_voteId, block.timestamp);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}