{
  "address": "0xCEc1A02D8a316c56aF3513998667a665CFb1777E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimal",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "TransferredToBackup",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SPLLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "backupAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_backup",
          "type": "address"
        }
      ],
      "name": "registerBackupAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToBackup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "transferTokensToBackupWithSignedMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userTransferAllowanceNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc89503e48bcb42cca2fd1290562c812df387eee37e89de653d8eab5ddc73208f",
  "receipt": {
    "to": null,
    "from": "0x44606229010B350629289dAD1008CD7EB708B968",
    "contractAddress": "0xCEc1A02D8a316c56aF3513998667a665CFb1777E",
    "transactionIndex": 0,
    "gasUsed": "2112568",
    "logsBloom": "0x
    "blockHash": "0xd3edde4af69c02e29a2aa4cf6dd43c8d119d3807f2a8fc663dc4d4562abacb19",
    "transactionHash": "0xc89503e48bcb42cca2fd1290562c812df387eee37e89de653d8eab5ddc73208f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10571869,
        "transactionHash": "0xc89503e48bcb42cca2fd1290562c812df387eee37e89de653d8eab5ddc73208f",
        "address": "0xCEc1A02D8a316c56aF3513998667a665CFb1777E",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000044606229010b350629289dad1008cd7eb708b968"
        ],
        "data": "0x000000000000000000000000000000000000000000084595161401484a000000",
        "logIndex": 0,
        "blockHash": "0xd3edde4af69c02e29a2aa4cf6dd43c8d119d3807f2a8fc663dc4d4562abacb19"
      }
    ],
    "blockNumber": 10571869,
    "cumulativeGasUsed": "2112568",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Illumvium Token",
    "ILLT",
    18
  ],
  "solcInputHash": "2ab9bf426875325862de7b99e9cc9754",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimal\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"TransferredToBackup\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SPLLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"backupAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_backup\",\"type\":\"address\"}],\"name\":\"registerBackupAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToBackup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferTokensToBackupWithSignedMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTransferAllowanceNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@conlot-crypto\",\"events\":{\"TransferredToBackup(address,address,uint256,uint256)\":{\"details\":\"event being triggered when backup transfer happens\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"constructor\":{\"details\":\"setup a IlluviumToken\"},\"registerBackupAddress(address)\":{\"details\":\"setup backup address\",\"params\":{\"_backup\":\"address where tokens will be transfered when backup happens\"}},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transferToBackup(uint256)\":{\"details\":\"token holders transfer tokens to backup without signed message\"},\"transferTokensToBackupWithSignedMessage(address,uint256,uint8,bytes32,bytes32)\":{\"details\":\"transfer tokens to backup with signed message\"}},\"stateVariables\":{\"_BACKUP_TRANSFER_SIGNATURE_TYPE_HASH\":{\"details\":\"backup transfer message digest\"},\"backupAddress\":{\"details\":\"registered backup address for user\"},\"userTransferAllowanceNonce\":{\"details\":\"nonce being used for generat signaturs\"},\"version\":{\"details\":\"version\"}},\"title\":\"IlluviumToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAX_SPLLY()\":{\"notice\":\"max supply of tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IlluviumToken.sol\":\"IlluviumToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/IlluviumToken.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport './token/EIP712.sol';\\nimport './token/ERC20.sol';\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n///\\n/// @title IlluviumToken\\n/// @author @conlot-crypto\\n/// @notice\\n///\\n////////////////////////////////////////////////////////////////////////////////////////////\\ncontract IlluviumToken is ERC20, EIP712 {\\n    /// @dev version\\n    string public constant version = '1';\\n\\n    /// @notice max supply of tokens\\n    uint256 public constant MAX_SPLLY = 1e25;\\n\\n    /// @dev registered backup address for user\\n    mapping(address => address) public backupAddress;\\n\\n    /// @dev nonce being used for generat signaturs\\n    mapping(address => uint256) public userTransferAllowanceNonce;\\n\\n    /// @dev backup transfer message digest\\n    bytes32 internal constant _BACKUP_TRANSFER_SIGNATURE_TYPE_HASH =\\n        keccak256('BackupTransfer(bytes32 warning,address from,uint amount,uint256 nonce)');\\n\\n    /// @dev event being triggered when backup transfer happens\\n    event TransferredToBackup(address _from, address _to, uint256 _amount, uint256 _blockNumber);\\n\\n    /// @dev setup a IlluviumToken\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        uint8 _decimal\\n    ) {\\n        initializeERC20(_tokenName, _tokenSymbol, _decimal);\\n        initializeEIP712(_tokenName, '1');\\n\\n        _mint(msg.sender, MAX_SPLLY);\\n    }\\n\\n    /// @dev setup backup address\\n    /// @param _backup address where tokens will be transfered when backup happens\\n    function registerBackupAddress(address _backup) external {\\n        require(balanceOf(msg.sender) > 0, 'Not token holder');\\n        require(_backup != address(0), 'Invalid backup address');\\n\\n        backupAddress[msg.sender] = _backup;\\n    }\\n\\n    /// @dev transfer tokens to backup with signed message\\n    function transferTokensToBackupWithSignedMessage(\\n        address _from,\\n        uint256 _amount,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(_from != msg.sender, 'Not delegator');\\n        require(backupAddress[_from] != address(0), 'Backup address is not registered');\\n        require(balanceOf(_from) >= _amount, \\\"Exceeds holder's balance\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                _domainSeparatorV4(),\\n                keccak256(\\n                    abi.encode(\\n                        _BACKUP_TRANSFER_SIGNATURE_TYPE_HASH,\\n                        keccak256('You are transfering tokens to backup'),\\n                        _from,\\n                        _amount,\\n                        userTransferAllowanceNonce[_from]++\\n                    )\\n                )\\n            )\\n        );\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress == _from, 'INVALID_SIGNATURE');\\n\\n        _transferToBackup(_from, backupAddress[_from], _amount);\\n    }\\n\\n    /// @dev internal function that does real token transfer to backup\\n    function _transferToBackup(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        _transfer(_from, _to, _amount);\\n\\n        emit TransferredToBackup(_from, _to, _amount, block.number);\\n    }\\n\\n    /// @dev token holders transfer tokens to backup without signed message\\n    function transferToBackup(uint256 _amount) external {\\n        require(balanceOf(msg.sender) >= _amount, 'Exceeds user balance');\\n        require(backupAddress[msg.sender] != address(0), 'Backup address is not registered');\\n\\n        _transferToBackup(msg.sender, backupAddress[msg.sender], _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5febc199c2fd52108b590f57ca2f17f8f46d2d7394e97b48e0d2bc9d6adf7c3c\",\"license\":\"Unlicense\"},\"contracts/token/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n */\\n\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    // samparsky: remove immutable to be initiated, it should only be set once in initialize\\n    bytes32 private _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private _CACHED_CHAIN_ID;\\n\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function initializeEIP712(string memory name, string memory version) internal {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = _getChainId();\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (_getChainId() == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 name,\\n        bytes32 version\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, name, version, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked('\\\\x19\\\\x01', _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x89980543f2a27d53277d8456e2e5cac19d3258c2b2c8bbeb3fe1f3cd1e481c24\",\"license\":\"MIT\"},\"contracts/token/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n *\\n * !!! samparsky modified: use initializeERC20 to replace constructor for proxy\\n */\\ncontract ERC20 is IERC20 {\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    string public name;\\n    uint8 public decimals;\\n    string public symbol;\\n\\n    function initializeERC20(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) internal {\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\\n        return true;\\n    }\\n\\n    function _mint(address _account, uint256 _amount) internal virtual {\\n        require(_account != address(0), 'ERC20: mint to the zero address');\\n\\n        _totalSupply += _amount;\\n        _balances[_account] += _amount;\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), 'ERC20: approve from the zero address');\\n        require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), 'ERC20: transfer from the zero address');\\n        require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), 'ERC20: burn from the zero address');\\n\\n        _balances[account] = _balances[account] - amount;\\n        _totalSupply = _totalSupply - amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9614cc938a6dccef61ee4856254812555277b8a87be92349c08f7a68b0ade12a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620029543803806200295483398181016040528101906200003791906200046e565b6200004a838383620000b760201b60201c565b62000091836040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506200010960201b60201c565b620000ae336a084595161401484a0000006200019160201b60201c565b50505062000891565b8260039080519060200190620000cf92919062000335565b508160059080519060200190620000e892919062000335565b5080600460006101000a81548160ff021916908360ff160217905550505050565b60008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9050826008819055508160098190555062000164620002e260201b60201c565b6007819055506200017d818484620002ea60201b60201c565b60068190555080600a819055505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000204576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001fb90620005ad565b60405180910390fd5b80600260008282546200021891906200065c565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200026f91906200065c565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002d69190620005cf565b60405180910390a35050565b600046905090565b6000838383620002ff620002e260201b60201c565b306040516020016200031695949392919062000550565b6040516020818303038152906040528051906020012090509392505050565b828054620003439062000744565b90600052602060002090601f016020900481019282620003675760008555620003b3565b82601f106200038257805160ff1916838001178555620003b3565b82800160010185558215620003b3579182015b82811115620003b257825182559160200191906001019062000395565b5b509050620003c29190620003c6565b5090565b5b80821115620003e1576000816000905550600101620003c7565b5090565b6000620003fc620003f68462000615565b620005ec565b9050828152602081018484840111156200041557600080fd5b620004228482856200070e565b509392505050565b600082601f8301126200043c57600080fd5b81516200044e848260208601620003e5565b91505092915050565b600081519050620004688162000877565b92915050565b6000806000606084860312156200048457600080fd5b600084015167ffffffffffffffff8111156200049f57600080fd5b620004ad868287016200042a565b935050602084015167ffffffffffffffff811115620004cb57600080fd5b620004d9868287016200042a565b9250506040620004ec8682870162000457565b9150509250925092565b6200050181620006b9565b82525050565b6200051281620006cd565b82525050565b600062000527601f836200064b565b915062000534826200084e565b602082019050919050565b6200054a81620006f7565b82525050565b600060a08201905062000567600083018862000507565b62000576602083018762000507565b62000585604083018662000507565b6200059460608301856200053f565b620005a36080830184620004f6565b9695505050505050565b60006020820190508181036000830152620005c88162000518565b9050919050565b6000602082019050620005e660008301846200053f565b92915050565b6000620005f86200060b565b90506200060682826200077a565b919050565b6000604051905090565b600067ffffffffffffffff8211156200063357620006326200080e565b5b6200063e826200083d565b9050602081019050919050565b600082825260208201905092915050565b60006200066982620006f7565b91506200067683620006f7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620006ae57620006ad620007b0565b5b828201905092915050565b6000620006c682620006d7565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156200072e57808201518184015260208101905062000711565b838111156200073e576000848401525b50505050565b600060028204905060018216806200075d57607f821691505b60208210811415620007745762000773620007df565b5b50919050565b62000785826200083d565b810181811067ffffffffffffffff82111715620007a757620007a66200080e565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b620008828162000701565b81146200088e57600080fd5b50565b6120b380620008a16000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638ce4cc07116100a2578063a9059cbb11610071578063a9059cbb14610309578063c97696c814610339578063dd62ed3e14610369578063eb71418a14610399578063f9ac7ca6146103b757610116565b80638ce4cc071461026f57806395d89b411461029f578063a457c2d7146102bd578063a74dd0f0146102ed57610116565b80632e39f34a116100e95780632e39f34a146101b7578063313ce567146101d357806339509351146101f157806354fd4d501461022157806370a082311461023f57610116565b806306fdde031461011b578063095ea7b31461013957806318160ddd1461016957806323b872dd14610187575b600080fd5b6101236103d3565b60405161013091906119ae565b60405180910390f35b610153600480360381019061014e91906114f6565b610461565b60405161016091906118a8565b60405180910390f35b610171610478565b60405161017e9190611b30565b60405180910390f35b6101a1600480360381019061019c91906114a7565b610482565b6040516101ae91906118a8565b60405180910390f35b6101d160048036038101906101cc9190611442565b61052c565b005b6101db610668565b6040516101e89190611b4b565b60405180910390f35b61020b600480360381019061020691906114f6565b61067b565b60405161021891906118a8565b60405180910390f35b610229610719565b60405161023691906119ae565b60405180910390f35b61025960048036038101906102549190611442565b610752565b6040516102669190611b30565b60405180910390f35b61028960048036038101906102849190611442565b61079a565b6040516102969190611b30565b60405180910390f35b6102a76107b2565b6040516102b491906119ae565b60405180910390f35b6102d760048036038101906102d291906114f6565b610840565b6040516102e491906118a8565b60405180910390f35b610307600480360381019061030291906115a9565b6108de565b005b610323600480360381019061031e91906114f6565b610a65565b60405161033091906118a8565b60405180910390f35b610353600480360381019061034e9190611442565b610a7c565b6040516103609190611848565b60405180910390f35b610383600480360381019061037e919061146b565b610aaf565b6040516103909190611b30565b60405180910390f35b6103a1610b36565b6040516103ae9190611b30565b60405180910390f35b6103d160048036038101906103cc9190611532565b610b45565b005b600380546103e090611ca9565b80601f016020809104026020016040519081016040528092919081815260200182805461040c90611ca9565b80156104595780601f1061042e57610100808354040283529160200191610459565b820191906000526020600020905b81548152906001019060200180831161043c57829003601f168201915b505050505081565b600061046e338484610ef7565b6001905092915050565b6000600254905090565b600061048f8484846110c2565b610521843384600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461051c9190611be3565b610ef7565b600190509392505050565b600061053733610752565b11610577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056e90611a70565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105de90611a30565b60405180910390fd5b80600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900460ff1681565b600061070f338484600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461070a9190611b8d565b610ef7565b6001905092915050565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600c6020528060005260406000206000915090505481565b600580546107bf90611ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546107eb90611ca9565b80156108385780601f1061080d57610100808354040283529160200191610838565b820191906000526020600020905b81548152906001019060200180831161081b57829003601f168201915b505050505081565b60006108d4338484600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108cf9190611be3565b610ef7565b6001905092915050565b806108e833610752565b1015610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092090611b10565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ef90611a90565b60405180910390fd5b610a6233600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611324565b50565b6000610a723384846110c2565b6001905092915050565b600b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6a084595161401484a00000081565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bab90611a10565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610c83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7a90611a90565b60405180910390fd5b83610c8d86610752565b1015610cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc590611ab0565b60405180910390fd5b6000610cd8611371565b7fd1c3c85b22158fab803476cca32a5626e645f3e9bf69a5ad6441990008cc59577f5e231b70296eaa9383b595d24cbf33f7d29a24da640b1587117439ba2df2cdfe8888600c60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610d6c90611cdb565b91905055604051602001610d849594939291906118c3565b60405160208183030381529060405280519060200120604051602001610dab929190611811565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051610de89493929190611969565b6020604051602081039080840390855afa158015610e0a573d6000803e3d6000fd5b5050506020604051035190508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7b90611a50565b60405180910390fd5b610eee87600b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688611324565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5e90611af0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fce906119f0565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516110b59190611b30565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112990611ad0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611199906119d0565b60405180910390fd5b806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111ec9190611be3565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112789190611b8d565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113179190611b30565b60405180910390a3505050565b61132f8383836110c2565b7f4f652d9b3bbc715a30808b066662212e8b12dae04b38755463ce6d7ff9f19e93838383436040516113649493929190611863565b60405180910390a1505050565b600060075461137e6113a5565b141561138e5760065490506113a2565b61139f600a546008546009546113ad565b90505b90565b600046905090565b60008383836113ba6113a5565b306040516020016113cf959493929190611916565b6040516020818303038152906040528051906020012090509392505050565b6000813590506113fd81612021565b92915050565b60008135905061141281612038565b92915050565b6000813590506114278161204f565b92915050565b60008135905061143c81612066565b92915050565b60006020828403121561145457600080fd5b6000611462848285016113ee565b91505092915050565b6000806040838503121561147e57600080fd5b600061148c858286016113ee565b925050602061149d858286016113ee565b9150509250929050565b6000806000606084860312156114bc57600080fd5b60006114ca868287016113ee565b93505060206114db868287016113ee565b92505060406114ec86828701611418565b9150509250925092565b6000806040838503121561150957600080fd5b6000611517858286016113ee565b925050602061152885828601611418565b9150509250929050565b600080600080600060a0868803121561154a57600080fd5b6000611558888289016113ee565b955050602061156988828901611418565b945050604061157a8882890161142d565b935050606061158b88828901611403565b925050608061159c88828901611403565b9150509295509295909350565b6000602082840312156115bb57600080fd5b60006115c984828501611418565b91505092915050565b6115db81611c17565b82525050565b6115ea81611c29565b82525050565b6115f981611c35565b82525050565b61161061160b82611c35565b611d24565b82525050565b600061162182611b66565b61162b8185611b71565b935061163b818560208601611c76565b61164481611d8c565b840191505092915050565b600061165c602383611b71565b915061166782611d9d565b604082019050919050565b600061167f602283611b71565b915061168a82611dec565b604082019050919050565b60006116a2600d83611b71565b91506116ad82611e3b565b602082019050919050565b60006116c5600283611b82565b91506116d082611e64565b600282019050919050565b60006116e8601683611b71565b91506116f382611e8d565b602082019050919050565b600061170b601183611b71565b915061171682611eb6565b602082019050919050565b600061172e601083611b71565b915061173982611edf565b602082019050919050565b6000611751602083611b71565b915061175c82611f08565b602082019050919050565b6000611774601883611b71565b915061177f82611f31565b602082019050919050565b6000611797602583611b71565b91506117a282611f5a565b604082019050919050565b60006117ba602483611b71565b91506117c582611fa9565b604082019050919050565b60006117dd601483611b71565b91506117e882611ff8565b602082019050919050565b6117fc81611c5f565b82525050565b61180b81611c69565b82525050565b600061181c826116b8565b915061182882856115ff565b60208201915061183882846115ff565b6020820191508190509392505050565b600060208201905061185d60008301846115d2565b92915050565b600060808201905061187860008301876115d2565b61188560208301866115d2565b61189260408301856117f3565b61189f60608301846117f3565b95945050505050565b60006020820190506118bd60008301846115e1565b92915050565b600060a0820190506118d860008301886115f0565b6118e560208301876115f0565b6118f260408301866115d2565b6118ff60608301856117f3565b61190c60808301846117f3565b9695505050505050565b600060a08201905061192b60008301886115f0565b61193860208301876115f0565b61194560408301866115f0565b61195260608301856117f3565b61195f60808301846115d2565b9695505050505050565b600060808201905061197e60008301876115f0565b61198b6020830186611802565b61199860408301856115f0565b6119a560608301846115f0565b95945050505050565b600060208201905081810360008301526119c88184611616565b905092915050565b600060208201905081810360008301526119e98161164f565b9050919050565b60006020820190508181036000830152611a0981611672565b9050919050565b60006020820190508181036000830152611a2981611695565b9050919050565b60006020820190508181036000830152611a49816116db565b9050919050565b60006020820190508181036000830152611a69816116fe565b9050919050565b60006020820190508181036000830152611a8981611721565b9050919050565b60006020820190508181036000830152611aa981611744565b9050919050565b60006020820190508181036000830152611ac981611767565b9050919050565b60006020820190508181036000830152611ae98161178a565b9050919050565b60006020820190508181036000830152611b09816117ad565b9050919050565b60006020820190508181036000830152611b29816117d0565b9050919050565b6000602082019050611b4560008301846117f3565b92915050565b6000602082019050611b606000830184611802565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611b9882611c5f565b9150611ba383611c5f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bd857611bd7611d2e565b5b828201905092915050565b6000611bee82611c5f565b9150611bf983611c5f565b925082821015611c0c57611c0b611d2e565b5b828203905092915050565b6000611c2282611c3f565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611c94578082015181840152602081019050611c79565b83811115611ca3576000848401525b50505050565b60006002820490506001821680611cc157607f821691505b60208210811415611cd557611cd4611d5d565b5b50919050565b6000611ce682611c5f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d1957611d18611d2e565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f742064656c656761746f7200000000000000000000000000000000000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f496e76616c6964206261636b7570206164647265737300000000000000000000600082015250565b7f494e56414c49445f5349474e4154555245000000000000000000000000000000600082015250565b7f4e6f7420746f6b656e20686f6c64657200000000000000000000000000000000600082015250565b7f4261636b75702061646472657373206973206e6f742072656769737465726564600082015250565b7f4578636565647320686f6c64657227732062616c616e63650000000000000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4578636565647320757365722062616c616e6365000000000000000000000000600082015250565b61202a81611c17565b811461203557600080fd5b50565b61204181611c35565b811461204c57600080fd5b50565b61205881611c5f565b811461206357600080fd5b50565b61206f81611c69565b811461207a57600080fd5b5056fea26469706673582212204dd61fab40a0f145d471a92032fdcb429075cf6dd9098087a6dccb786b7ab2d164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638ce4cc07116100a2578063a9059cbb11610071578063a9059cbb14610309578063c97696c814610339578063dd62ed3e14610369578063eb71418a14610399578063f9ac7ca6146103b757610116565b80638ce4cc071461026f57806395d89b411461029f578063a457c2d7146102bd578063a74dd0f0146102ed57610116565b80632e39f34a116100e95780632e39f34a146101b7578063313ce567146101d357806339509351146101f157806354fd4d501461022157806370a082311461023f57610116565b806306fdde031461011b578063095ea7b31461013957806318160ddd1461016957806323b872dd14610187575b600080fd5b6101236103d3565b60405161013091906119ae565b60405180910390f35b610153600480360381019061014e91906114f6565b610461565b60405161016091906118a8565b60405180910390f35b610171610478565b60405161017e9190611b30565b60405180910390f35b6101a1600480360381019061019c91906114a7565b610482565b6040516101ae91906118a8565b60405180910390f35b6101d160048036038101906101cc9190611442565b61052c565b005b6101db610668565b6040516101e89190611b4b565b60405180910390f35b61020b600480360381019061020691906114f6565b61067b565b60405161021891906118a8565b60405180910390f35b610229610719565b60405161023691906119ae565b60405180910390f35b61025960048036038101906102549190611442565b610752565b6040516102669190611b30565b60405180910390f35b61028960048036038101906102849190611442565b61079a565b6040516102969190611b30565b60405180910390f35b6102a76107b2565b6040516102b491906119ae565b60405180910390f35b6102d760048036038101906102d291906114f6565b610840565b6040516102e491906118a8565b60405180910390f35b610307600480360381019061030291906115a9565b6108de565b005b610323600480360381019061031e91906114f6565b610a65565b60405161033091906118a8565b60405180910390f35b610353600480360381019061034e9190611442565b610a7c565b6040516103609190611848565b60405180910390f35b610383600480360381019061037e919061146b565b610aaf565b6040516103909190611b30565b60405180910390f35b6103a1610b36565b6040516103ae9190611b30565b60405180910390f35b6103d160048036038101906103cc9190611532565b610b45565b005b600380546103e090611ca9565b80601f016020809104026020016040519081016040528092919081815260200182805461040c90611ca9565b80156104595780601f1061042e57610100808354040283529160200191610459565b820191906000526020600020905b81548152906001019060200180831161043c57829003601f168201915b505050505081565b600061046e338484610ef7565b6001905092915050565b6000600254905090565b600061048f8484846110c2565b610521843384600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461051c9190611be3565b610ef7565b600190509392505050565b600061053733610752565b11610577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056e90611a70565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105de90611a30565b60405180910390fd5b80600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900460ff1681565b600061070f338484600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461070a9190611b8d565b610ef7565b6001905092915050565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600c6020528060005260406000206000915090505481565b600580546107bf90611ca9565b80601f01602080910402602001604051908101604052809291908181526020018280546107eb90611ca9565b80156108385780601f1061080d57610100808354040283529160200191610838565b820191906000526020600020905b81548152906001019060200180831161081b57829003601f168201915b505050505081565b60006108d4338484600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108cf9190611be3565b610ef7565b6001905092915050565b806108e833610752565b1015610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092090611b10565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ef90611a90565b60405180910390fd5b610a6233600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611324565b50565b6000610a723384846110c2565b6001905092915050565b600b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6a084595161401484a00000081565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bab90611a10565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610c83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7a90611a90565b60405180910390fd5b83610c8d86610752565b1015610cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc590611ab0565b60405180910390fd5b6000610cd8611371565b7fd1c3c85b22158fab803476cca32a5626e645f3e9bf69a5ad6441990008cc59577f5e231b70296eaa9383b595d24cbf33f7d29a24da640b1587117439ba2df2cdfe8888600c60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610d6c90611cdb565b91905055604051602001610d849594939291906118c3565b60405160208183030381529060405280519060200120604051602001610dab929190611811565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051610de89493929190611969565b6020604051602081039080840390855afa158015610e0a573d6000803e3d6000fd5b5050506020604051035190508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7b90611a50565b60405180910390fd5b610eee87600b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688611324565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5e90611af0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fce906119f0565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516110b59190611b30565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112990611ad0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611199906119d0565b60405180910390fd5b806000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111ec9190611be3565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112789190611b8d565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113179190611b30565b60405180910390a3505050565b61132f8383836110c2565b7f4f652d9b3bbc715a30808b066662212e8b12dae04b38755463ce6d7ff9f19e93838383436040516113649493929190611863565b60405180910390a1505050565b600060075461137e6113a5565b141561138e5760065490506113a2565b61139f600a546008546009546113ad565b90505b90565b600046905090565b60008383836113ba6113a5565b306040516020016113cf959493929190611916565b6040516020818303038152906040528051906020012090509392505050565b6000813590506113fd81612021565b92915050565b60008135905061141281612038565b92915050565b6000813590506114278161204f565b92915050565b60008135905061143c81612066565b92915050565b60006020828403121561145457600080fd5b6000611462848285016113ee565b91505092915050565b6000806040838503121561147e57600080fd5b600061148c858286016113ee565b925050602061149d858286016113ee565b9150509250929050565b6000806000606084860312156114bc57600080fd5b60006114ca868287016113ee565b93505060206114db868287016113ee565b92505060406114ec86828701611418565b9150509250925092565b6000806040838503121561150957600080fd5b6000611517858286016113ee565b925050602061152885828601611418565b9150509250929050565b600080600080600060a0868803121561154a57600080fd5b6000611558888289016113ee565b955050602061156988828901611418565b945050604061157a8882890161142d565b935050606061158b88828901611403565b925050608061159c88828901611403565b9150509295509295909350565b6000602082840312156115bb57600080fd5b60006115c984828501611418565b91505092915050565b6115db81611c17565b82525050565b6115ea81611c29565b82525050565b6115f981611c35565b82525050565b61161061160b82611c35565b611d24565b82525050565b600061162182611b66565b61162b8185611b71565b935061163b818560208601611c76565b61164481611d8c565b840191505092915050565b600061165c602383611b71565b915061166782611d9d565b604082019050919050565b600061167f602283611b71565b915061168a82611dec565b604082019050919050565b60006116a2600d83611b71565b91506116ad82611e3b565b602082019050919050565b60006116c5600283611b82565b91506116d082611e64565b600282019050919050565b60006116e8601683611b71565b91506116f382611e8d565b602082019050919050565b600061170b601183611b71565b915061171682611eb6565b602082019050919050565b600061172e601083611b71565b915061173982611edf565b602082019050919050565b6000611751602083611b71565b915061175c82611f08565b602082019050919050565b6000611774601883611b71565b915061177f82611f31565b602082019050919050565b6000611797602583611b71565b91506117a282611f5a565b604082019050919050565b60006117ba602483611b71565b91506117c582611fa9565b604082019050919050565b60006117dd601483611b71565b91506117e882611ff8565b602082019050919050565b6117fc81611c5f565b82525050565b61180b81611c69565b82525050565b600061181c826116b8565b915061182882856115ff565b60208201915061183882846115ff565b6020820191508190509392505050565b600060208201905061185d60008301846115d2565b92915050565b600060808201905061187860008301876115d2565b61188560208301866115d2565b61189260408301856117f3565b61189f60608301846117f3565b95945050505050565b60006020820190506118bd60008301846115e1565b92915050565b600060a0820190506118d860008301886115f0565b6118e560208301876115f0565b6118f260408301866115d2565b6118ff60608301856117f3565b61190c60808301846117f3565b9695505050505050565b600060a08201905061192b60008301886115f0565b61193860208301876115f0565b61194560408301866115f0565b61195260608301856117f3565b61195f60808301846115d2565b9695505050505050565b600060808201905061197e60008301876115f0565b61198b6020830186611802565b61199860408301856115f0565b6119a560608301846115f0565b95945050505050565b600060208201905081810360008301526119c88184611616565b905092915050565b600060208201905081810360008301526119e98161164f565b9050919050565b60006020820190508181036000830152611a0981611672565b9050919050565b60006020820190508181036000830152611a2981611695565b9050919050565b60006020820190508181036000830152611a49816116db565b9050919050565b60006020820190508181036000830152611a69816116fe565b9050919050565b60006020820190508181036000830152611a8981611721565b9050919050565b60006020820190508181036000830152611aa981611744565b9050919050565b60006020820190508181036000830152611ac981611767565b9050919050565b60006020820190508181036000830152611ae98161178a565b9050919050565b60006020820190508181036000830152611b09816117ad565b9050919050565b60006020820190508181036000830152611b29816117d0565b9050919050565b6000602082019050611b4560008301846117f3565b92915050565b6000602082019050611b606000830184611802565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611b9882611c5f565b9150611ba383611c5f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bd857611bd7611d2e565b5b828201905092915050565b6000611bee82611c5f565b9150611bf983611c5f565b925082821015611c0c57611c0b611d2e565b5b828203905092915050565b6000611c2282611c3f565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611c94578082015181840152602081019050611c79565b83811115611ca3576000848401525b50505050565b60006002820490506001821680611cc157607f821691505b60208210811415611cd557611cd4611d5d565b5b50919050565b6000611ce682611c5f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d1957611d18611d2e565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f742064656c656761746f7200000000000000000000000000000000000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f496e76616c6964206261636b7570206164647265737300000000000000000000600082015250565b7f494e56414c49445f5349474e4154555245000000000000000000000000000000600082015250565b7f4e6f7420746f6b656e20686f6c64657200000000000000000000000000000000600082015250565b7f4261636b75702061646472657373206973206e6f742072656769737465726564600082015250565b7f4578636565647320686f6c64657227732062616c616e63650000000000000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4578636565647320757365722062616c616e6365000000000000000000000000600082015250565b61202a81611c17565b811461203557600080fd5b50565b61204181611c35565b811461204c57600080fd5b50565b61205881611c5f565b811461206357600080fd5b50565b61206f81611c69565b811461207a57600080fd5b5056fea26469706673582212204dd61fab40a0f145d471a92032fdcb429075cf6dd9098087a6dccb786b7ab2d164736f6c63430008040033",
  "devdoc": {
    "author": "@conlot-crypto",
    "events": {
      "TransferredToBackup(address,address,uint256,uint256)": {
        "details": "event being triggered when backup transfer happens"
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "constructor": {
        "details": "setup a IlluviumToken"
      },
      "registerBackupAddress(address)": {
        "details": "setup backup address",
        "params": {
          "_backup": "address where tokens will be transfered when backup happens"
        }
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transferToBackup(uint256)": {
        "details": "token holders transfer tokens to backup without signed message"
      },
      "transferTokensToBackupWithSignedMessage(address,uint256,uint8,bytes32,bytes32)": {
        "details": "transfer tokens to backup with signed message"
      }
    },
    "stateVariables": {
      "_BACKUP_TRANSFER_SIGNATURE_TYPE_HASH": {
        "details": "backup transfer message digest"
      },
      "backupAddress": {
        "details": "registered backup address for user"
      },
      "userTransferAllowanceNonce": {
        "details": "nonce being used for generat signaturs"
      },
      "version": {
        "details": "version"
      }
    },
    "title": "IlluviumToken",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAX_SPLLY()": {
        "notice": "max supply of tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1022,
        "contract": "contracts/IlluviumToken.sol:IlluviumToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1028,
        "contract": "contracts/IlluviumToken.sol:IlluviumToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1030,
        "contract": "contracts/IlluviumToken.sol:IlluviumToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1032,
        "contract": "contracts/IlluviumToken.sol:IlluviumToken",
        "label": "name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1034,
        "contract": "contracts/IlluviumToken.sol:IlluviumToken",
        "label": "decimals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 1036,
        "contract": "contracts/IlluviumToken.sol:IlluviumToken",
        "label": "symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 867,
        "contract": "contracts/IlluviumToken.sol:IlluviumToken",
        "label": "_CACHED_DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 869,
        "contract": "contracts/IlluviumToken.sol:IlluviumToken",
        "label": "_CACHED_CHAIN_ID",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 871,
        "contract": "contracts/IlluviumToken.sol:IlluviumToken",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 873,
        "contract": "contracts/IlluviumToken.sol:IlluviumToken",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 875,
        "contract": "contracts/IlluviumToken.sol:IlluviumToken",
        "label": "_TYPE_HASH",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 618,
        "contract": "contracts/IlluviumToken.sol:IlluviumToken",
        "label": "backupAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 623,
        "contract": "contracts/IlluviumToken.sol:IlluviumToken",
        "label": "userTransferAllowanceNonce",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}